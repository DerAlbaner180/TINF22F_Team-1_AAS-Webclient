[{"C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\index.js":"1","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\home.js":"2","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\aboutPage.js":"3","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\itemview.js":"4","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\assetBody.js":"5","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\header.js":"6","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\headerAboutPage.js":"7","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\filter.js":"8","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\item.js":"9","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\serverMenu.js":"10","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\backend.js":"11"},{"size":1051,"mtime":1712307212168,"results":"12","hashOfConfig":"13"},{"size":660,"mtime":1712307212168,"results":"14","hashOfConfig":"13"},{"size":1707,"mtime":1712307212158,"results":"15","hashOfConfig":"13"},{"size":1207,"mtime":1712307212170,"results":"16","hashOfConfig":"13"},{"size":7783,"mtime":1712910195234,"results":"17","hashOfConfig":"13"},{"size":1028,"mtime":1712307212166,"results":"18","hashOfConfig":"13"},{"size":795,"mtime":1712307212167,"results":"19","hashOfConfig":"13"},{"size":19015,"mtime":1712910195237,"results":"20","hashOfConfig":"13"},{"size":1816,"mtime":1712910195238,"results":"21","hashOfConfig":"13"},{"size":2992,"mtime":1712307212170,"results":"22","hashOfConfig":"13"},{"size":9126,"mtime":1712910195235,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"1fcbamh",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},"C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\index.js",["64","65","66","67"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport \"./bootstrap/bootstrap.rtl.min.css\";\r\nimport \"./style.css\";\r\nimport {\r\n    BrowserRouter,\r\n    Routes, //replaces \"Switch\" used till v5\r\n    Route,\r\n} from \"react-router-dom\";\r\nimport AboutPage from \"./aboutPage.js\";\r\nimport Home from \"./home.js\";\r\n\r\nexport class Main extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='vh-100 d-flex flex-column'>\r\n                <Home/>\r\n                {/*<BrowserRouter>*/}\r\n                {/*    <Routes>*/}\r\n                {/*        <Route path=\"https://mercal03.github.io/TINF21C_Team1_AAS-Server-Webclient/\" element={<Home />} />*/}\r\n                {/*        <Route path=\"https://mercal03.github.io/TINF21C_Team1_AAS-Server-Webclient/about\" element={<AboutPage />} />*/}\r\n                {/*    </Routes>*/}\r\n                {/*</BrowserRouter>*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport let index = ReactDOM.createRoot(document.getElementById('root'));\r\nindex.render(<Main/>);","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\home.js",[],[],"C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\aboutPage.js",[],[],"C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\itemview.js",[],[],"C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\assetBody.js",["68","69","70","71"],[],"import React from \"react\";\r\n\r\nexport function render() {\r\n}\r\n\r\n\r\nclass AssetBody extends React.Component {\r\n\r\n    changeContent = (event) => {\r\n        this.clearView();\r\n        document.getElementById(event.target.innerHTML).hidden = false;\r\n        event.target.classList.add(\"bg-primary-subtle\");\r\n    };\r\n\r\n    clearView = () => {\r\n        let children = document.getElementById(\"bodyContent\").children;\r\n        for (let child of children) {\r\n            child.hidden = true;\r\n        }\r\n        let buttons = document.getElementsByClassName(\"navigation-button\");\r\n        for(let button of buttons){\r\n            button.classList.remove(\"bg-primary-subtle\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let shell = JSON.parse(window.sessionStorage.getItem(\"shellBody\"));\r\n        if (window.sessionStorage.getItem(\"shellBody\") !== null) {\r\n            return (\r\n                <div className=\"m-2 p-2 overflow-auto w-100\">\r\n                    <h3 className=\"\">{shell.idShort}</h3> {/*Name des Assets*/}\r\n\r\n                    <div className={\"d-flex flex-column my-3\"}>\r\n                        <div className={\"d-flex flex-row\"}>\r\n                            <div className=\"image-container border\">\r\n                                <a href={shell.image}>\r\n                                    <img\r\n                                        src={(shell.image == null) ? 'https://de.ingrammicro.com/_layouts/images/CSDefaultSite/common/no-image-lg.png' : shell.image}\r\n                                        alt={\"\"} className=\"asset-image\"/>\r\n                                </a>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <table>\r\n                                    <tbody>\r\n                                    {Object.entries(shell).map(([key, value]) => {\r\n                                        if (typeof value !== \"object\" && key !== \"idShort\") {\r\n                                            if (value.toString().search(\"attachment\") === -1) {\r\n                                                console.log(key)\r\n                                                console.log(shell)\r\n                                                return (\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <p className=\"key\">{key}</p>{/* id, idEndides, apiVersion( die Assetinfo) */}\r\n\r\n                                                            <p className=\"value\">{value === '' ? '-' : value}</p>  {/* die Werte der Assetinfo*/}\r\n                                                            <hr></hr>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                );\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                        <hr></hr>\r\n                        <div className={\"d-flex flex-row\"}>\r\n                            <div className={\"d-flex flex-column navigation-buttons\"}>\r\n                                {Object.entries(shell).map(([key, value]) => {\r\n                                    if (typeof value === \"object\" && shell[key] !== null) {\r\n                                        return (\r\n                                            <div onClick={this.changeContent}\r\n                                                 className=\"navigation-button my-2 shadow-sm border rounded\">\r\n                                                {key}\r\n                                            </div>\r\n                                        );\r\n                                    }\r\n                                })}\r\n                            </div>\r\n                            <div id={\"bodyContent\"} className=\"flex-grow-1\">\r\n                                {Object.entries(shell).map(([key, value]) => {\r\n                                    if (typeof value === \"object\") {\r\n                                        return buildBody(shell[key], key);\r\n                                    }\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return <div></div>;\r\n        }\r\n    }\r\n}\r\n\r\nconst buildBody = (json, id = \"\") => {\r\n    let hidden = id !== \"\";\r\n    if (id === \"Nameplate\") hidden = false;\r\n    return (\r\n        <table id={id} className=\"asset-table\" hidden={hidden}>\r\n            <tbody>\r\n            {json ? (\r\n                Object.entries(json).map(([key, value]) => {\r\n                    if (typeof value === \"object\") {\r\n                        if (Object.keys(json[key]).length > 0) {\r\n                            return (\r\n                                <tr>\r\n                                    <td colSpan={2}>\r\n                                        <div className=\"accordion\" id=\"accordionExample\">\r\n                                            <div className=\"accordion-item\">\r\n                                                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                                                    <button\r\n                                                        className=\"accordion-button collapsed\"\r\n                                                        type=\"button\"\r\n                                                        data-bs-toggle=\"collapse\"\r\n                                                        data-bs-target={`#${key}`}\r\n                                                        aria-expanded=\"true\"\r\n                                                        aria-controls=\"collapseOne\"\r\n                                                    >\r\n                                                        {key}\r\n                                                    </button>\r\n                                                </h2>\r\n                                                <div\r\n                                                    id={`${key}`}\r\n                                                    className=\"accordion-collapse collapse\"\r\n                                                    aria-labelledby=\"headingOne\"\r\n                                                >\r\n                                                    <div className=\"accordion-body\">\r\n                                                        {buildBody(json[key])}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        }\r\n                    } else {\r\n                        if (key !== \"idShort\") {\r\n                            return (\r\n                                <tr>\r\n                                    <td>\r\n                                        <p className=\"key\">{key}</p>\r\n                                        <p className=\"value\">{value === '' ? '-' : value}</p>\r\n                                        <hr></hr>\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        }\r\n                    }\r\n                })) : (<tr></tr>)}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default AssetBody;\r\n","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\header.js",["72"],[],"import React from \"react\";\r\nimport ServerMenu from \"./serverMenu\";\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        let serverUrl = window.sessionStorage.getItem(\"url\") ? window.sessionStorage.getItem(\"url\") : \"\";\r\n        return (\r\n            <header id=\"header\" className=\"py-2 px-3 bg-primary text-white sticky-top shadow-sm w-100\">\r\n                    <div className=\"d-flex flex-wrap align-items-center justify-content-md-between justify-content-center\">\r\n                        <div><h1>AAS-Webclient</h1></div>\r\n                            <nav className=\"d-flex flex-nowrap align-items-center justify-content-between\">\r\n                                <span>Current Server: <a href={serverUrl} target={\"_blank\"}>{serverUrl}</a></span>\r\n                                <ServerMenu/>\r\n                                {/*<a href=\"/about\" class=\"navBtn\">About</a>*/}\r\n                            </nav>\r\n                    </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\headerAboutPage.js",["73"],[],"import React from \"react\";\r\n\r\nclass HeaderAboutPage extends React.Component {\r\n    render() {\r\n        let serverUrl = window.sessionStorage.getItem(\"url\") ? window.sessionStorage.getItem(\"url\") : \"\";\r\n        return (\r\n            <header id=\"header\" className=\"py-2 px-3 bg-primary text-white sticky-top shadow-sm w-100\">\r\n                <div className=\"d-flex flex-wrap align-items-center justify-content-md-between justify-content-center\">\r\n                    <div><h1>AAS-Webclient</h1></div>\r\n                    <nav className=\"d-flex flex-nowrap align-items-center justify-content-between\">\r\n                        <a href=\"/\" class=\"navBtn\">Home</a>\r\n                    </nav>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderAboutPage;\r\n","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\filter.js",["74","75","76","77","78","79","80"],[],"import React from \"react\";\r\nimport {index, Main} from \"./index\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownItem from \"react-bootstrap/DropdownItem\";\r\nimport DropdownToggle from \"react-bootstrap/DropdownToggle\";\r\nimport DropdownMenu from \"react-bootstrap/DropdownMenu\";\r\nimport {getFullShellData} from \"./backend\";\r\nimport {render} from \"./assetBody\";\r\nimport {loadBody} from \"./backend\";\r\nimport { openAsset } from './item';\r\nimport './switchButton.css';\r\n\r\nclass Filter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mode: \"user\"\r\n\r\n        };\r\n        window.sessionStorage.setItem(\"mode\", props.mode);\r\n        this.toggleMode = this.toggleMode.bind(this);\r\n        getFullShellData();\r\n\r\n    }\r\n\r\n    toggleMode() {\r\n        const newMode = this.state.mode === 1 ? 2 : 1;\r\n        this.setState({ mode: newMode });\r\n        sessionStorage.setItem('mode', newMode === 1 ? 'user' : 'expert');\r\n\r\n        getFullShellData();\r\n            if (window.sessionStorage.getItem(\"loaded\")==true){\r\n                console.log(\"nach getData\")\r\n                const shell = JSON.parse(window.sessionStorage.getItem(\"shellBody\"));\r\n                const item = document.getElementById(shell.idShort);\r\n\r\n                console.log(item.className);\r\n                console.log(item.id);\r\n                item.click();\r\n            }\r\n            console.log(window.sessionStorage.getItem(\"loaded\"))\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    filterForName() {\r\n        //Sucht nach einem AAS name\r\n        let searchInput = document\r\n            .getElementById(\"searchField\")\r\n            .value.toLowerCase(); // zieht sich den Namen aus dem Inputfeld über die ID\r\n        let newAssetArray = [];\r\n        let shells = JSON.parse(window.sessionStorage.getItem(\"shells\"));\r\n\r\n        shells.forEach((element) => {\r\n            if (element[\"idShort\"].toLowerCase().search(searchInput) !== -1) {\r\n                // Abfrage ob Suchstring enthalten ist\r\n                newAssetArray.push(element);\r\n            }\r\n        });\r\n        //kleiner Spaß-------------------------------------\r\n        if (searchInput === \"luka\") {\r\n            window.open(\"https://media.licdn.com/dms/image/C4D03AQGgoDd-BaTu4Q/profile-displayphoto-shrink_800_800/0/1646867801108?e=2147483647&v=beta&t=PHxi3-KyHUS_WnGkT2lMsGWyxIVCBmuazelUTlKpb4k\")\r\n        }\r\n        //-------------------------------------------------\r\n        if (newAssetArray.length === 0) {\r\n            //Error Handling\r\n            document.getElementById(\"error_message_NextToSearchField\").style.visibility = \"visible\";\r\n        } else {\r\n            document.getElementById(\"error_message_NextToSearchField\").style.visibility = \"hidden\";\r\n            window.sessionStorage.setItem(\"content\", JSON.stringify(newAssetArray));\r\n            index.render(<Main/>);\r\n        }\r\n    }\r\n\r\n    autoComplete() {\r\n        let shells = JSON.parse(window.sessionStorage.getItem(\"shells\"));\r\n        let options = [];\r\n        shells.forEach((element) => {\r\n            if (element[\"idShort\"]) {\r\n                console.log(element[\"idShort\"])\r\n                options.push(element[\"idShort\"])\r\n            }\r\n        })\r\n\r\n        const input = document.getElementById(\"searchField\").value.toLowerCase();\r\n        const autoCompleteList = document.getElementById('autoCompleteList');\r\n        const searchField = document.getElementById('searchField');\r\n\r\n        autoCompleteList.innerHTML = '';\r\n\r\n        const filteredOptions = options.filter(option => option.toLowerCase().startsWith(input));\r\n        if (input.length !== 0) {\r\n            filteredOptions.forEach(option => {\r\n                const li = document.createElement('li');\r\n                li.textContent = option;\r\n                li.setAttribute('id', option);\r\n                li.classList.add('autoCompleteItem');\r\n                li.addEventListener('click', () => {\r\n                        document.getElementById(\"autoCompleteList\").style.display = 'none';\r\n                        let shells = JSON.parse(window.sessionStorage.getItem(\"shells\"));\r\n                        let newAsset = [];\r\n                        shells.forEach((element) => {\r\n                            if (element[\"idShort\"] && element[\"idShort\"] === option) {\r\n                                newAsset.push(element)\r\n                                //Deletes error messages from a wrong search before, if an Asset is found\r\n                                document.getElementById(\"error_message_NextToSearchField\").style.visibility = \"hidden\";\r\n                            }\r\n                        })\r\n                        if (newAsset.length === 0) {\r\n                            //Error Handling\r\n                            document.getElementById(\"error_message_NextToSearchField\").style.visibility = \"visible\";\r\n                        } else {\r\n                            window.sessionStorage.setItem(\"content\", JSON.stringify(newAsset));\r\n                            index.render(<Main/>);\r\n                        }\r\n                    }\r\n                )\r\n                autoCompleteList.appendChild(li);\r\n            });\r\n        } else {\r\n            if (shells.length === 0) {\r\n                //Error Handling\r\n                document.getElementById(\"error_message_NextToSearchField\").style.visibility = \"visible\";\r\n            } else {\r\n                window.sessionStorage.setItem(\"content\", JSON.stringify(shells));\r\n                index.render(<Main/>);\r\n            }\r\n        }\r\n        autoCompleteList.style.display = 'block';\r\n    }\r\n\r\n    getManufactureName() {\r\n        let newAssetArray = [];\r\n        let shells = JSON.parse(window.sessionStorage.getItem(\"shells\"));\r\n\r\n        if (shells !== null) {\r\n            shells.forEach((element) => {\r\n                if (element[\"Nameplate\"]) {\r\n                    if (element[\"Nameplate\"][\"ManufacturerName\"])\r\n                        newAssetArray.push(element[\"Nameplate\"][\"ManufacturerName\"]);\r\n                }\r\n            });\r\n            newAssetArray = [...new Set(newAssetArray)];\r\n            newAssetArray.unshift(\"All\");\r\n\r\n        }\r\n        return newAssetArray\r\n    }\r\n\r\n    filterForManufacturerName(manufacturerNameDropDown) {\r\n        let newAssetArray = [];\r\n        let shells = JSON.parse(window.sessionStorage.getItem(\"shells\"));\r\n        if (manufacturerNameDropDown) {\r\n            if (manufacturerNameDropDown === \"All\") {\r\n                newAssetArray = shells;\r\n            } else {\r\n                shells.forEach((element) => {\r\n                    if (element[\"Nameplate\"]) {\r\n                        if (\r\n                            element[\"Nameplate\"][\"ManufacturerName\"].search(\r\n                                manufacturerNameDropDown\r\n                            ) !== -1\r\n                        ) {\r\n                            newAssetArray.push(element);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (newAssetArray.length === 0) {\r\n            //Error Handling\r\n            document.getElementById(\"error_message_filterForManufacturerName\").style.visibility = \"visible\";\r\n        } else {\r\n            document.getElementById(\"error_message_filterForManufacturerName\").style.visibility = \"hidden\";\r\n            window.sessionStorage.setItem(\"content\", JSON.stringify(newAssetArray));\r\n            index.render(<Main/>);\r\n        }\r\n    }\r\n\r\n    searchForManufacturerName() {\r\n        let newAssetArray = [];\r\n        let shells = JSON.parse(window.sessionStorage.getItem(\"shells\"));\r\n        let manufacturerNameSearchField = document\r\n            .getElementById(\"manufacturerNameSearchField\")\r\n            .value.toLowerCase();\r\n\r\n        if (manufacturerNameSearchField) {\r\n            shells.forEach((element) => {\r\n                if (element[\"Nameplate\"]) {\r\n                    if (\r\n                        element[\"Nameplate\"][\"ManufacturerName\"]\r\n                            .toLowerCase()\r\n                            .search(manufacturerNameSearchField) !== -1\r\n                    ) {\r\n                        newAssetArray.push(element);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (newAssetArray.length === 0) {\r\n            //Error Handling\r\n            document.getElementById(\"error_message_filterForManufacturerName\").style.visibility = \"visible\";\r\n        } else {\r\n            document.getElementById(\"error_message_filterForManufacturerName\").style.visibility = \"hidden\";\r\n            window.sessionStorage.setItem(\"content\", JSON.stringify(newAssetArray));\r\n            index.render(<Main/>);\r\n        }\r\n        document.getElementById(\"manufacturerNameSearchField\").value = \"\";\r\n    }\r\n\r\n\r\n    deleteSearchInput() {\r\n        let shells = JSON.parse(window.sessionStorage.getItem(\"shells\"));\r\n        document.getElementById(\"searchField\").value = \"\";\r\n        if (shells.length === 0) {\r\n            //Error Handling\r\n            alert(\"Cannot Clear!\");\r\n        } else {\r\n            window.sessionStorage.setItem(\"content\", JSON.stringify(shells));\r\n            index.render(<Main/>);\r\n        }\r\n    }\r\n\r\n    sortAsYear(upOrDown) {\r\n        //let upOrDown = document.getElementById(\"sortByYear\").value;\r\n        //document.getElementById(\"up\").style.background = \"\"\r\n        document.getElementById(\"up\").style.fontWeight = \"\"\r\n        //document.getElementById(\"up\").style.color = \"\"\r\n        //document.getElementById(\"down\").style.background = \"\"\r\n        //document.getElementById(\"down\").style.color = \"\"\r\n        document.getElementById(\"down\").style.fontWeight = \"\"\r\n        let shells = JSON.parse(window.sessionStorage.getItem(\"content\"));\r\n        let newAssetDateArray = [];\r\n        let newAssetWithoutDateArray = [];\r\n\r\n\r\n        document.getElementById(upOrDown).style.fontWeight = \"bold\";\r\n        //document.getElementById(upOrDown).style.background = \"#030d6c\"\r\n        //document.getElementById(upOrDown).style.color = \"white\"\r\n\r\n        shells.forEach((element) => {\r\n            if (element[\"Nameplate\"] && element[\"Nameplate\"][\"YearOfConstruction\"]) {\r\n                if (element[\"Nameplate\"][\"YearOfConstruction\"].length === 4) {\r\n                    // Jahr formatieren\r\n                    element[\"Nameplate\"][\"YearOfConstruction\"] = element[\"Nameplate\"][\"YearOfConstruction\"] + \"-01-01\";\r\n                    newAssetDateArray.push(element);\r\n                } else if (element[\"Nameplate\"][\"YearOfConstruction\"].length === 7) {\r\n                    // Jahr und Monat formatieren\r\n                    element[\"Nameplate\"][\"YearOfConstruction\"] = element[\"Nameplate\"][\"YearOfConstruction\"] + \"-01\";\r\n                    newAssetDateArray.push(element);\r\n                } else if (element[\"Nameplate\"][\"YearOfConstruction\"].length === 10) {\r\n                    // Datum ist bereits im richtigen Format\r\n                    element[\"Nameplate\"][\"YearOfConstruction\"] = element[\"Nameplate\"][\"YearOfConstruction\"];\r\n                    newAssetDateArray.push(element);\r\n                } else {\r\n                    newAssetWithoutDateArray.push(element)\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        let sortedDates = []\r\n        console.log(\"Sortiert:\")\r\n        if (upOrDown === \"up\") {\r\n            sortedDates = newAssetDateArray.sort((a, b) => {\r\n                const dateA = new Date(a.Nameplate.YearOfConstruction);\r\n                const dateB = new Date(b.Nameplate.YearOfConstruction);\r\n                return dateA - dateB;\r\n            });\r\n        }\r\n        if (upOrDown === \"down\") {\r\n            sortedDates = newAssetDateArray.sort((a, b) => {\r\n                const dateA = new Date(a.Nameplate.YearOfConstruction);\r\n                const dateB = new Date(b.Nameplate.YearOfConstruction);\r\n                return dateB - dateA;\r\n            });\r\n        }\r\n\r\n        sortedDates.forEach((element) => {\r\n            if (element[\"Nameplate\"]) {\r\n                if (element[\"Nameplate\"][\"YearOfConstruction\"]) {\r\n                    console.log(element[\"Nameplate\"][\"YearOfConstruction\"])\r\n                }\r\n            }\r\n        })\r\n        sortedDates = sortedDates.concat(newAssetWithoutDateArray);\r\n        console.log(newAssetWithoutDateArray)\r\n        console.log(sortedDates)\r\n\r\n        if (sortedDates.length === 0) {\r\n            //Error Handling\r\n            alert(\"The assets cannot be sorted because they do not have a date\");\r\n        } else {\r\n            window.sessionStorage.setItem(\"content\", JSON.stringify(sortedDates));\r\n            index.render(<Main/>);\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { mode } = this.state;\r\n        const sliderValue = mode === \"user\" ? 1 : 2;\r\n        const sort =\r\n            <Dropdown\r\n                className=\"my-dropdown\"\r\n                autoClose=\"true\"\r\n                variant=\"light\"\r\n                align=\"end\">\r\n                <DropdownToggle id=\"dropdown-autoclose-true\">\r\n                    Year\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem id={\"up\"} onClick={() => this.sortAsYear(\"up\")}>oldest first</DropdownItem>\r\n                    <DropdownItem id={\"down\"} onClick={() => this.sortAsYear(\"down\")}>newest first</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>;\r\n\r\n        const filter =\r\n            <Dropdown\r\n                className=\"mx-2 my-dropdown\"\r\n                autoClose=\"outside\"\r\n                variant=\"light\"\r\n                align=\"end\">\r\n                <DropdownToggle id=\"dropdown-autoclose-outside\">\r\n                    Manufacturer\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem>\r\n                        <form\r\n                            className=\"mx-2 d-flex flex-row\"\r\n                            onSubmit={(event) => event.preventDefault()}>\r\n                            <input\r\n                                id=\"manufacturerNameSearchField\"\r\n                                type=\"text\"\r\n                                className=\"form-control form-control-dark  w-auto\"\r\n                                placeholder=\"Manufacturer\"\r\n                            ></input>\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn btn-link mx-2 text-nowrap\"\r\n                                onClick={this.searchForManufacturerName}>\r\n                                Search\r\n                            </button>\r\n                        </form>\r\n                        <div className={\"error_message\"} id=\"error_message_filterForManufacturerName\"\r\n                             style={{visibility: \"hidden\", color: \"darkred\"}}>\r\n                            No entries found\r\n                        </div>\r\n                    </DropdownItem>\r\n                    {this.getManufactureName().map(element => {\r\n                        return <DropdownItem value={element}\r\n                                             onClick={() => this.filterForManufacturerName(element)}> {element} </DropdownItem>\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>;\r\n\r\n        return (\r\n            <div className=\"px-3 py-1 d-flex flex-row shadow-sm bg-light align-items-center justify-content-start\">\r\n                {window.sessionStorage.getItem(\"loaded\") === \"true\" ? sort : \"\"}\r\n                {window.sessionStorage.getItem(\"loaded\") === \"true\" ? filter : \"\"}\r\n                {/* Suchfeldleiste */}\r\n                <form autoComplete=\"off\" onBlur={async (event) => {\r\n                    await new Promise(resolve => setTimeout(resolve, 200));\r\n                    document.getElementById(\"autoCompleteList\").style.display = 'none';\r\n                }} onSubmit={(event) => {\r\n                    event.preventDefault()\r\n                }}>\r\n                    <div className=\"search-bar-container d-flex flex-row bg-white align-items-center input-group\">\r\n                        <input\r\n                            id={\"searchField\"}\r\n                            className=\"mr-sm-2 border-0 px-3 py-1 bg-transparent outline-none\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search\"\r\n                            aria-label=\"Search\"\r\n                            onKeyUp={this.autoComplete}\r\n                        />\r\n                        <div className=\"input-group-append d-flex flex-row align-items-center\">\r\n                            <button\r\n                                id={\"searchInputStringBtn\"}\r\n                                className=\"my-2 my-sm-0 d-flex my-search-button\"\r\n                                type=\"submit\"\r\n                                onClick={this.filterForName}\r\n                            >\r\n                                <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"16\"\r\n                                    height=\"16\"\r\n                                    fill=\"currentColor\"\r\n                                    class=\"bi bi-search\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                >\r\n                                    <path\r\n                                        d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\"/>\r\n                                </svg>\r\n                            </button>\r\n                            <input\r\n                                className=\"my-search-button px-3\"\r\n                                type=\"reset\"\r\n                                value=\"X\"\r\n                                alt=\"Clear the search form\"\r\n                                onClick={this.deleteSearchInput}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <ul id=\"autoCompleteList\" className=\"bg-white border rounded shadow-sm\"></ul>\r\n                </form>\r\n                <div className={\"error_message\"} id=\"error_message_NextToSearchField\"\r\n                     style={{visibility: \"hidden\", color: \"darkred\"}}>\r\n                    No entries found\r\n                </div>\r\n                <div>\r\n                    <label className=\"switch\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={this.state.mode === 2}\r\n                            onChange={this.toggleMode}\r\n                        />\r\n                        <span className=\"slider round\"></span>\r\n                    </label>\r\n                    <p>{this.state.mode === 2 ? 'Expert Mode' : 'User Mode'}</p>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        );\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Filter;","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\item.js",["81"],[],"import React from 'react';\r\nimport \"./style.css\";\r\nimport {index, Main} from \"./index\";\r\nimport {loadBody} from \"./backend\";\r\n\r\nexport function openAsset() {\r\n}\r\n\r\n\r\nclass Item extends React.Component {\r\n\r\n    openAsset = (e) => {\r\n        console.log(e)\r\n        console.log(\"wird geöffnet\")\r\n\r\n        document.getElementById(\"\")\r\n        let parent = document.getElementById(this.props.shell.idShort).parentElement;\r\n        console.log(this.props)\r\n        let children = Array.from(parent.children);\r\n        children.map(function (item){\r\n        item.classList.remove(\"bg-primary-subtle\");\r\n        })\r\n        document.getElementById(this.props.shell.idShort).classList.add(\"bg-primary-subtle\");\r\n        if (Object.keys(this.props.shell).includes(\"submodels\")) {\r\n            loadBody(this.props.shell).then(response => {\r\n                window.sessionStorage.setItem(\"shellBody\", JSON.stringify(response));\r\n                index.render(<Main/>);\r\n            });\r\n        } else {\r\n            window.sessionStorage.setItem(\"shellBody\", JSON.stringify(this.props.shell));\r\n            index.render(<Main/>);\r\n        }\r\n        document.getElementById(\"error_message_NextToSearchField\").style.visibility = \"hidden\";\r\n        \r\n    }\r\n    render() {\r\n        let name = this.props.shell.idShort;\r\n        let image = this.props.shell.image ? this.props.shell.image : \"\";\r\n\r\n        return (\r\n            <div id={name} onClick={this.openAsset} className={\"item p-2 my-2 d-sm-flex justify-content-between align-items-center list-group-item-action list-group-item border shadow-sm rounded\"}>\r\n                <img style={{maxHeight: \"50px\"}} src={image} alt={\"\"}/>\r\n                <div>\r\n                   {name}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Item;","C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\serverMenu.js",[],[],"C:\\Users\\David Bauer\\Desktop\\Uni\\Softwareengineering\\TINF22F_Team-1_AAS-Webclient\\SOURCE\\aas-webclient\\src\\backend.js",["82"],[],"import {index, Main} from \"./index\";\r\n\r\nexport let controller = new AbortController();\r\nconsole.log(\"Start\");\r\nasync function getData(url) {\r\n    if (url.search(\"http\") === -1) {\r\n        alert(\"Not a correct url\");\r\n        return undefined;\r\n    }\r\n\r\n    controller = new AbortController();\r\n    console.log(\"Get data of:\"+url);\r\n\r\n    return fetch(url, {\r\n        signal: controller.signal,\r\n        mode: \"cors\"\r\n    })\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.json().then(jsonResponse => {\r\n                console.log(jsonResponse)\r\n                return jsonResponse;\r\n            }).catch(err => {\r\n                console.log(err);\r\n            })\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nfunction getLangString(json) {\r\n    if (\"langStrings\" in json) {\r\n        let langStrings = json.langStrings\r\n        for (let langPref of [\"de\", \"en\"]) {\r\n            for (let langString of langStrings) {\r\n                if (langString.language === langPref) {\r\n                    return langString.text;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n\r\nfunction extractData(element, id, path, api) {\r\n    let url = window.sessionStorage.getItem(\"url\");\r\n    url += \"submodels/\" + btoa(id) + \"/submodelelements\";\r\n    let returnObject = {};\r\n\r\n    if (api === 3) {\r\n        for (let nameplateElement of element) {\r\n            if (nameplateElement.modelType === \"MultiLanguageProperty\") {\r\n                returnObject[nameplateElement.idShort] = getLangString(nameplateElement.value);\r\n            } else if (nameplateElement.modelType === \"SubmodelElementCollection\") {\r\n                returnObject[nameplateElement.idShort] = extractData(nameplateElement.value, id, path + (path.length > 0 ? \".\" : \"\") + nameplateElement.idShort, api);\r\n            } else if (nameplateElement.modelType === \"Property\") {\r\n                returnObject[nameplateElement.idShort] = nameplateElement.value;\r\n            } else if (nameplateElement.modelType === \"File\") {\r\n                returnObject[\"FilePath\"] = url + \"/\" + path + \".\" + nameplateElement.idShort + \"/attachment\";\r\n                returnObject[nameplateElement.idShort] = nameplateElement.value;\r\n            }\r\n        }\r\n    } else {\r\n        for (let nameplateElement of element) {\r\n            if (nameplateElement.modelType.name === \"MultiLanguageProperty\") {\r\n                returnObject[nameplateElement.idShort] = getLangString(nameplateElement.value);\r\n            } else if (nameplateElement.modelType.name === \"SubmodelElementCollection\") {\r\n                returnObject[nameplateElement.idShort] = extractData(nameplateElement.value, id, path + (path.length > 0 ? \".\" : \"\") + nameplateElement.idShort, api);\r\n            } else if (nameplateElement.modelType.name === \"Property\") {\r\n                returnObject[nameplateElement.idShort] = nameplateElement.value;\r\n            } else if (nameplateElement.modelType.name === \"File\") {\r\n                returnObject[\"FilePath\"] = url + \"/\" + path + \".\" + nameplateElement.idShort + \"/attachment\";\r\n                returnObject[nameplateElement.idShort] = nameplateElement.value;\r\n            }\r\n        }\r\n    }\r\n\r\n    return returnObject;\r\n}\r\n\r\nfunction searchForKey(json, regex) {\r\n    let returnList = [];\r\n    if (typeof json === \"object\") {\r\n        for (let key in json) {\r\n            if (regex.test(key) && json[\"FilePath\"]) {\r\n                returnList.push(json[\"FilePath\"]);\r\n            }\r\n            returnList = returnList.concat(searchForKey(json[key], regex));\r\n        }\r\n    }\r\n    return returnList;\r\n}\r\n\r\nasync function getFullShellData() {\r\n    window.sessionStorage.setItem(\"loaded\", false);\r\n    let apiVersion;\r\n    let url = window.sessionStorage.getItem(\"url\");\r\n    if (!url.endsWith(\"/\")) {\r\n        url += \"/\";\r\n        window.sessionStorage.setItem(\"url\", url);\r\n    }\r\n\r\n    let shells = await getData(url + \"shells\").then( response => {\r\n        if (response !== undefined) {\r\n            //console.log(response)\r\n            //console.log( typeof response);\r\n            const entries= Object.entries(response)\r\n            //console.log(entries)\r\n            //console.log(entries[0][1])\r\n            //console.log(entries[1])\r\n            return entries[0][1].map(element => {\r\n                if (!apiVersion) {\r\n                    if (element[\"submodels\"][0][\"type\"]) {\r\n                        apiVersion = 3;\r\n                    } else {\r\n                        apiVersion = 1;\r\n                    }\r\n                    console.log(apiVersion);\r\n                }\r\n\r\n                let id = apiVersion === 3 ? element.id : element.identification.id;\r\n\r\n                let submodelIds = [];\r\n                if (element.submodels) {\r\n                    //console.log(\"Element\")\r\n                    //console.log(element)\r\n\r\n                    //console.log(\"Bildpfad: \")\r\n                    //console.log(element.assetInformation.defaultThumbnail)\r\n                    for (let i = 0; i < element.submodels.length; i++) {\r\n                        if (element.submodels[i][\"keys\"][0]) {\r\n                            submodelIds.push(\r\n                                element.submodels[i][\"keys\"][0][\"value\"] //Submodelname\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n                console.log(\"Submodels\")\r\n                for(let i=0; i<submodelIds.length;i++){\r\n                    //console.log(submodelIds[i])\r\n\r\n                }\r\n                const mode=window.sessionStorage.getItem(\"mode\");\r\n                if (mode==\"expert\"){\r\n                    return {\r\n                        idShort: element.idShort,\r\n                        id: id,\r\n                        idEncoded: btoa(id),\r\n                        apiVersion: apiVersion,\r\n                        globalAssetId: element.assetInformation.globalAssetId,\r\n                        Assetsubmodels: submodelIds\r\n                    };\r\n\r\n                }else {\r\n                    return {\r\n                        idShort: element.idShort,\r\n                        id: id,\r\n                    };\r\n                }\r\n            });\r\n        }\r\n    }).catch(err => {\r\n        console.log(err)\r\n        window.alert(\"Server lädt nicht\")\r\n    });\r\n\r\n    if (shells !== undefined) {\r\n        window.sessionStorage.setItem(\"shells\", JSON.stringify(shells));\r\n\r\n        console.log(\"Hier sind die Shells!!!!!!!!!\"); //hier ist irgendwo der Fehler\r\n        console.log(shells);\r\n\r\n        window.sessionStorage.setItem(\"content\", JSON.stringify(shells));\r\n        index.render(<Main/>);\r\n\r\n        console.log(shells);\r\n        for (let i = 0; i < shells.length; i++) {\r\n            await loadBody(shells[i]).then(shell => {\r\n                window.sessionStorage.setItem(\"loaded\", true);\r\n                shells[i] = shell;\r\n                console.log(shell); //hier irgendwo muss der Fehler sein\r\n            });\r\n            window.sessionStorage.setItem(\"shells\", JSON.stringify(shells));\r\n            index.render(<Main/>);\r\n        }\r\n        window.sessionStorage.setItem(\"content\", JSON.stringify(shells));\r\n\r\n        console.log(shells);\r\n    }\r\n}\r\n\r\nasync function loadBody(shell) {\r\n    console.log(\"lade Body\")\r\n    let url = window.sessionStorage.getItem(\"url\");\r\n    url += \"shells/\" + (url.search(\"murr\") === -1 ? btoa(shell.id) : encodeURIComponent(shell.id));\r\n    url += (shell.apiVersion === 3 ? \"/submodels\" : \"/aas/submodels\");\r\n\r\n\r\n    if (url.search(\"murr\") !== -1) {\r\n        let submodelData = [];\r\n        await getData(url).then(element => {\r\n            for (let i = 0; i < element.length; i++) {\r\n                submodelData.push(element[i].idShort);\r\n            }\r\n        });\r\n        shell.submodels = submodelData;\r\n    }\r\n\r\n    for (let i = 0; i < shell.submodels.length; i++) {\r\n        await loadSubmodel(shell.submodels[i], url, shell.apiVersion).then(response => {\r\n            if (response !== undefined) {\r\n                shell[response.idShort] = response;\r\n                let images = searchForKey(response, /[pP]roductImage\\d*/);\r\n                if (images.length > 0) {\r\n                    shell[\"image\"] = images[0];\r\n                    console.log(images[0]);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    delete shell.submodels;\r\n    return shell;\r\n}\r\n\r\nasync function loadSubmodel(id, url, api) {\r\n    url += \"/\" + (url.search(\"murr\") === -1 ? btoa(id) : id) + \"/submodel\"\r\n    return getData(url).then(element => {\r\n        if (element !== undefined) {\r\n            if (element.semanticId !== undefined) {\r\n                return {\r\n                    semanticId: (element.semanticId.keys[0] ? element.semanticId.keys[0].value : \"\"),\r\n                    idShort: element.idShort,\r\n                    id: element.id,\r\n                    idEncoded: btoa(element.id),\r\n                    ...extractData(element.submodelElements, element.id, \"\", api),\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport {getFullShellData, loadBody}",{"ruleId":"83","severity":1,"message":"84","line":6,"column":5,"nodeType":"85","messageId":"86","endLine":6,"endColumn":18},{"ruleId":"83","severity":1,"message":"87","line":7,"column":5,"nodeType":"85","messageId":"86","endLine":7,"endColumn":11},{"ruleId":"83","severity":1,"message":"88","line":8,"column":5,"nodeType":"85","messageId":"86","endLine":8,"endColumn":10},{"ruleId":"83","severity":1,"message":"89","line":10,"column":8,"nodeType":"85","messageId":"86","endLine":10,"endColumn":17},{"ruleId":"90","severity":1,"message":"91","line":46,"column":79,"nodeType":"92","messageId":"93","endLine":46,"endColumn":81},{"ruleId":"90","severity":1,"message":"91","line":71,"column":75,"nodeType":"92","messageId":"93","endLine":71,"endColumn":77},{"ruleId":"90","severity":1,"message":"91","line":83,"column":75,"nodeType":"92","messageId":"93","endLine":83,"endColumn":77},{"ruleId":"90","severity":1,"message":"91","line":106,"column":57,"nodeType":"92","messageId":"93","endLine":106,"endColumn":59},{"ruleId":"94","severity":1,"message":"95","line":12,"column":55,"nodeType":"96","messageId":"97","endLine":12,"endColumn":93,"fix":"98"},{"ruleId":"83","severity":1,"message":"99","line":5,"column":13,"nodeType":"85","messageId":"86","endLine":5,"endColumn":22},{"ruleId":"83","severity":1,"message":"100","line":8,"column":9,"nodeType":"85","messageId":"86","endLine":8,"endColumn":15},{"ruleId":"83","severity":1,"message":"101","line":9,"column":9,"nodeType":"85","messageId":"86","endLine":9,"endColumn":17},{"ruleId":"83","severity":1,"message":"102","line":10,"column":10,"nodeType":"85","messageId":"86","endLine":10,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":32,"column":56,"nodeType":"105","messageId":"106","endLine":32,"endColumn":58},{"ruleId":"83","severity":1,"message":"107","line":94,"column":15,"nodeType":"85","messageId":"86","endLine":94,"endColumn":26},{"ruleId":"108","severity":1,"message":"109","line":260,"column":66,"nodeType":"110","messageId":"111","endLine":260,"endColumn":108},{"ruleId":"83","severity":1,"message":"112","line":309,"column":15,"nodeType":"85","messageId":"86","endLine":309,"endColumn":26},{"ruleId":"90","severity":1,"message":"113","line":20,"column":22,"nodeType":"114","messageId":"115","endLine":20,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":144,"column":25,"nodeType":"105","messageId":"106","endLine":144,"endColumn":27},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Routes' is defined but never used.","'Route' is defined but never used.","'AboutPage' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"116","text":"117"},"'serverUrl' is assigned a value but never used.","'render' is defined but never used.","'loadBody' is defined but never used.","'openAsset' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'searchField' is assigned a value but never used.","no-self-assign","'element[\"Nameplate\"][\"YearOfConstruction\"]' is assigned to itself.","MemberExpression","selfAssignment","'sliderValue' is assigned a value but never used.","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside",[740,740]," rel=\"noreferrer\""]